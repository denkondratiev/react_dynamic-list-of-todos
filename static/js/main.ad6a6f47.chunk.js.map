{"version":3,"sources":["api.ts","components/Todo/Todo.tsx","components/TodoList/TodoList.tsx","components/Button/Button.tsx","App.tsx","index.tsx"],"names":["fetchData","url","a","fetch","then","response","json","dataObject","data","getData","todos","users","map","todo","user","find","id","userId","Todo","props","className","name","title","completed","TodoList","key","Button","disabled","isLoaded","listLoad","sortByTitle","sortByStatus","handleButtonLoad","sortByName","type","onClick","App","useState","setTodos","setDisabled","setIsLoaded","setListLoad","prev","sort","b","localeCompare","Number","ReactDOM","render","document","getElementById"],"mappings":"iSAKMA,EAAS,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACSC,MAAMF,GAAKG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAD9C,cACVC,EADU,yBAGTA,EAAWC,MAHF,2CAAH,sDAMFC,EAAO,uCAAG,8BAAAP,EAAA,sEACOF,EATZ,2CAQK,cACfU,EADe,gBAEOV,EAXZ,2CASK,cAEfW,EAFe,yBAIdD,EAAME,KAAI,SAAAC,GAAI,kCAChBA,GADgB,IAEnBC,KAAMH,EAAMI,MAAK,SAAAD,GAAI,OAAIA,EAAKE,KAAOH,EAAKI,gBANvB,2CAAH,qDCJPC,EAAwB,SAACC,GAAW,IACvCN,EAASM,EAATN,KAER,OACE,wBAAIO,UAAU,QACZ,2BAAIP,EAAKC,KAAKO,MACd,uBAAGD,UAAU,eAAeP,EAAKS,OAE/BT,EAAKU,UACD,uBAAGH,UAAU,mBAAb,QACA,uBAAGA,UAAU,qBAAb,kBCTCI,EAA4B,SAACL,GAAW,IAC3CT,EAAUS,EAAVT,MAER,OACE,wBAAIU,UAAU,QACXV,EAAME,KAAI,SAAAC,GAAI,OACb,kBAAC,EAAD,CAAMY,IAAKZ,EAAKG,GAAIH,KAAMA,SCFrBa,EAA0B,SAACP,GAAW,IAE/CQ,EAOER,EAPFQ,SACAC,EAMET,EANFS,SACAC,EAKEV,EALFU,SACAC,EAIEX,EAJFW,YACAC,EAGEZ,EAHFY,aACAC,EAEEb,EAFFa,iBACAC,EACEd,EADFc,WAGF,OACE,yBAAKb,UAAU,WAEXS,EAEI,oCACE,4BACEK,KAAK,SACLd,UAAU,SACVe,QAAS,kBAAML,MAHjB,iBAOA,4BACEI,KAAK,SACLd,UAAU,SACVe,QAAS,kBAAMJ,MAHjB,kBAOA,4BACEG,KAAK,SACLd,UAAU,SACVe,QAAS,kBAAMF,MAHjB,iBAUF,4BACEC,KAAK,SACLd,UAAU,SACVO,SAAUA,EACVQ,QAAS,kBAAMH,MAEdJ,EAAW,aAAe,UCT1BQ,G,MA3CO,WAAO,IAAD,EACAC,mBAAyB,IADzB,mBACnB3B,EADmB,KACZ4B,EADY,OAEMD,oBAAS,GAFf,mBAEnBV,EAFmB,KAETY,EAFS,OAGMF,oBAAS,GAHf,mBAGnBT,EAHmB,KAGTY,EAHS,OAIMH,oBAAS,GAJf,mBAInBR,EAJmB,KAITY,EAJS,KAMpBT,EAAgB,uCAAG,sBAAA9B,EAAA,6DACvBsC,GAAY,GACZD,GAAY,GAFW,SAIjB9B,IAAUL,MAAK,SAAAI,GAAI,OAAI8B,EAAS9B,MAJf,OAMvBiC,GAAY,GANW,2CAAH,qDAqBtB,OACE,yBAAKrB,UAAU,aACb,kBAAC,EAAD,CACEQ,SAAUA,EACVC,SAAUA,EACVF,SAAUA,EACVG,YAlBc,WAClBQ,GAAS,SAAAI,GAAI,OAAI,YAAIA,GAAMC,MAAK,SAACzC,EAAG0C,GAAJ,OAAU1C,EAAEoB,MAAMuB,cAAcD,EAAEtB,cAkB9DS,aAfe,WACnBO,GAAS,SAAAI,GAAI,OAAI,YAAIA,GAAMC,MAAK,SAACzC,EAAG0C,GAAJ,OAAUE,OAAO5C,EAAEqB,WAAauB,OAAOF,EAAErB,kBAerEU,WAZa,WACjBK,GAAS,SAAAI,GAAI,OAAI,YAAIA,GAAMC,MAAK,SAACzC,EAAG0C,GAAJ,OAAU1C,EAAEY,KAAKO,KAAKwB,cAAcD,EAAE9B,KAAKO,aAYvEW,iBAAkBA,IAEpB,kBAAC,EAAD,CAAUtB,MAAOA,OCzCvBqC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.ad6a6f47.chunk.js","sourcesContent":["import { Todo, User, TodoWithUser } from './interfaces';\n\nconst API_USERS = 'https://mate.academy/students-api/users';\nconst API_TODOS = 'https://mate.academy/students-api/todos';\n\nconst fetchData = async (url: string) => {\n  const dataObject = await fetch(url).then(response => response.json());\n\n  return dataObject.data;\n};\n\nexport const getData = async (): Promise<TodoWithUser[]> => {\n  const todos: Todo[] = await fetchData(API_TODOS);\n  const users: User[] = await fetchData(API_USERS);\n\n  return todos.map(todo => ({\n    ...todo,\n    user: users.find(user => user.id === todo.userId) as User,\n  }));\n};\n","import React from 'react';\nimport { TodoWithUser } from '../../interfaces';\n\ninterface Props {\n  todo: TodoWithUser;\n}\n\nexport const Todo: React.FC<Props> = (props) => {\n  const { todo } = props;\n\n  return (\n    <li className=\"item\">\n      <p>{todo.user.name}</p>\n      <p className=\"item__title\">{todo.title}</p>\n      {\n        todo.completed\n          ? <p className=\"item__completed\">Done</p>\n          : <p className=\"item__uncompleted\">Not Done Yet</p>\n      }\n    </li>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../Todo/Todo';\nimport { TodoWithUser } from '../../interfaces';\n\ninterface Props {\n  todos: TodoWithUser[];\n}\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { todos } = props;\n\n  return (\n    <ul className=\"list\">\n      {todos.map(todo => (\n        <Todo key={todo.id} todo={todo} />\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\n\ninterface Props {\n  disabled: boolean;\n  isLoaded: boolean;\n  listLoad: boolean;\n  handleButtonLoad: () => void;\n  sortByTitle: () => void;\n  sortByStatus: () => void;\n  sortByName: () => void;\n}\n\nexport const Button: React.FC<Props> = (props) => {\n  const {\n    disabled,\n    isLoaded,\n    listLoad,\n    sortByTitle,\n    sortByStatus,\n    handleButtonLoad,\n    sortByName,\n  } = props;\n\n  return (\n    <div className=\"wrapper\">\n      {\n        listLoad\n          ? (\n            <>\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => sortByTitle()}\n              >\n                Sort by title\n              </button>\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => sortByStatus()}\n              >\n                Sort by status\n              </button>\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => sortByName()}\n              >\n                Sort by name\n              </button>\n            </>\n          )\n          : (\n            <button\n              type=\"button\"\n              className=\"button\"\n              disabled={disabled}\n              onClick={() => handleButtonLoad()}\n            >\n              {isLoaded ? 'Loading...' : 'Load'}\n            </button>\n          )\n      }\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TodoWithUser } from './interfaces';\nimport { getData } from './api';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { Button } from './components/Button/Button';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<TodoWithUser[]>([]);\n  const [disabled, setDisabled] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [listLoad, setListLoad] = useState(false);\n\n  const handleButtonLoad = async () => {\n    setIsLoaded(true);\n    setDisabled(true);\n\n    await getData().then(data => setTodos(data));\n\n    setListLoad(true);\n  };\n\n  const sortByTitle = () => {\n    setTodos(prev => [...prev].sort((a, b) => a.title.localeCompare(b.title)));\n  };\n\n  const sortByStatus = () => {\n    setTodos(prev => [...prev].sort((a, b) => Number(a.completed) - Number(b.completed)));\n  };\n\n  const sortByName = () => {\n    setTodos(prev => [...prev].sort((a, b) => a.user.name.localeCompare(b.user.name)));\n  };\n\n  return (\n    <div className=\"container\">\n      <Button\n        isLoaded={isLoaded}\n        listLoad={listLoad}\n        disabled={disabled}\n        sortByTitle={sortByTitle}\n        sortByStatus={sortByStatus}\n        sortByName={sortByName}\n        handleButtonLoad={handleButtonLoad}\n      />\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}